generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model userinfo {
  username          String              @id
  email             String              @unique
  password          String
  usertype          String
  profileImgURL     String?             @default("../../assets/user-img.png")
  status            String              @default("Unverified")
  job_post          job_post[]          @relation("job_Post")
  post_availability post_availability[] @relation("post_availability")
  applications      applications[]      @relation("user_Applications")
  labourinfo        labourinfo?         @relation("UserLabourInfo")

  @@map("userinfo")
}

model labourinfo {
  id          String   @id @default(uuid())
  username    String   @unique
  rating      Float    @default(0.0)
  completions Int      @default(0)
  userinfo    userinfo @relation("UserLabourInfo", fields: [username], references: [username], onDelete: Cascade)

  @@map("labourinfo")
}

model job_post {
  id             String         @id @default(uuid())
  // joblogo        String
  jobtitle       String
  jobtype        String
  jobdescription String
  tasks          Json
  salary         String
  company        String
  location       String
  state          String
  skills         String
  // posttime       DateTime       @default(now())
  posttime       String
  user           String
  postedby       userinfo       @relation("job_Post", fields: [user], references: [username], onDelete: Cascade)
  applications   applications[] @relation("job_Applications")
  status         String         @default("in progress")
}

model post_availability {
  id            String   @id @default(uuid())
  name          String
  email         String
  job           String
  jobtype       String
  min_pay       String
  state         String
  experienceYrs String
  skills        String
  posttime      DateTime @default(now())
  postedby      userinfo @relation("post_availability", fields: [user], references: [username], onDelete: Cascade)
  user          String
}

model applications {
  id            String   @id @default(uuid())
  jobid         String
  job           job_post @relation("job_Applications", fields: [jobid], references: [id], onDelete: Cascade)
  applicant     String
  appliedToUser String?
  appliedby     userinfo @relation("user_Applications", fields: [applicant], references: [username], onDelete: Cascade)
  approved      String   @default("pending")

  @@unique([jobid, applicant])
}
